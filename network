import sys,getopt

# 输入一个二进制数，返回十六进制数、
def bin2hex(bin):
	return hex(int(bin,2))
# 输入一个十六进制数，返回一个二进制数
def hex2bin(hex):
	return bin(int(hex,16))
# 输入一个十进制数，返回二进制数
def dec2bin(dec):
	return bin(int(dec,10))
# 输入一个二进制数，返回十进制数
def bin2dec(bin):
	return int(bin,2)

# 二进制数的逻辑与，或，取反，异或，右移位，左移位计算符 & | ~ ^ >> <<
# 子网划分：现有两个 C 类网，202.203.204.0 和 202.203.224.0，分别把它们平均分成 4 个（子网号2位）和 8 个（子网号3位）子网，写出每个子网的起始、终结 IP 和子网掩码。


# subnet_1 = 4 = pow(2) 
# subnet_2 = 8 = pow(3)
def calcIP(cnetip,mask):
	# 把IP地址按小数点号分成四份
	cnet = str(cnetip).strip(".")
	# 主机号是第四组ip
	hostip = int(cnet[3])
	# 转为二进制以便于之后的计算
	hostbin = dec2bin(hostip)
	# 子网掩码转为10进制数
	mask_dec = int(mask)
	# 获取子网个数，转为二进制位数
	mask_bin = dec2bin(mask_dec-1) # 11,111
	mask_bin_str = str(mask_bin)  #'11','111'
	mask_count = len(mask_bin_str) # 2,3
	mask_str = '{0:0>8}'.format(mask_bin_str) #'11000000' ,'11100000'
	mask_bin = dec2bin(mask_str) #11000000,11100000
	# 计算子网掩码 和各个子网起始，终结IP
	netip = hostbin & mask_bin
	netip_str = str(netip)
	
	 
	


if __name__ == __"main"__:
# IP 地址就可看作 IP = 网络号 + 子网号 + 主机号
# IP地址分成四份，每份转化为二进制地址，与子网掩码进行逻辑与运算
opts, args = getopt.getopt(sys.argv[1:], "hi:m:")
cnetip = ""
mask = ""
for op,value in opts:
	if op == "-i":
		cnetip = value
	elif op == "-m":
		mask = value
	elif op == "-h"
		usage()
		sys.exit()
calcIP(cnetip,mask)
